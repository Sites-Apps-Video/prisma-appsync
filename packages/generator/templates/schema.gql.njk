{% for model in models %}
    type {{ model.name }} {{ model.directives.type | safe }} {
        {% for field in model.fields -%}
            {{ field.name }}: {{ field.scalar }}{% if field.isRequired -%}!{% endif %} {{ field.directives.field | safe }}
        {% endfor %}
    }
{% endfor %}

type BatchPayload {{ directiveAliases.default | safe }} {
    count: Int
}

{% for enum in enums %}
    enum {{ enum.name }} {
        {% for value in enum.values -%}
            {{ value }}
        {% endfor %}
    }

    input {{ enum.name }}EnumFilter {
        equals: {{ enum.name }}
        in: [{{ enum.name }}!]
        not: {{ enum.name }}EnumFilter
        notIn: [{{ enum.name }}!]
    }
{% endfor %}

enum OrderByArg {
    ASC
    DESC
}

{% for model in models %}
    {% if model.idFields | length -%}
        input {{ model.idFields | join(" ") | pascalCase }}FieldsInput {
            {% for field in model.fields -%}
                {% if field.name in model.idFields -%}
                    {{ field.name }}: {{ field.scalar }}
                {% endif -%}
            {% endfor %}
        }
    {% endif %}

    input {{ model.name }}Filter {
        some: {{ model.name }}ScalarWhereInput
        every: {{ model.name }}ScalarWhereInput
        none: {{ model.name }}ScalarWhereInput
    }

    input {{ model.name }}RelationFilter {
        is: {{ model.name }}ScalarWhereInput
        isNot: {{ model.name }}ScalarWhereInput
    }

    input {{ model.name }}ScalarWhereInput {
        {% for field in model.fields -%}
            {% if not field.relation -%}
                {% if field.scalar in ["Int", "Float", "AWSDateTime", "AWSJSON", "AWSEmail", "AWSURL", "Boolean", "String"] -%}
                    {{ field.name }}: {{ field.scalar }}
                {% endif -%}
            {% endif -%}
        {% endfor %}
    }

    input {{ model.name }}WhereInput {
        OR: [{{ model.name }}WhereInput]
        NOT: [{{ model.name }}WhereInput]
        AND: [{{ model.name }}WhereInput]
        {% for field in model.fields -%}
            {% if not field.relation -%}
                {% if field.isEnum -%}
                    {{ field.name }}: {{ field.scalar }}EnumFilter
                {% elseif field.scalar in ["Int", "Float", "AWSDateTime", "AWSJSON", "AWSEmail", "AWSURL", "Boolean"] -%}
                    {{ field.name }}: {{ field.scalar }}Filter
                {% else -%}
                    {{ field.name }}: StringFilter
                {% endif -%}
            {% else -%}
                {% if field.relation.kind === "one" -%}
                    {{ field.name }}: {{ field.relation.type }}RelationFilter
                {% else  -%}
                    {{ field.name }}: {{ field.relation.type }}Filter
                {% endif -%}
            {% endif -%}
        {% endfor %}
    }

    input {{ model.name }}WhereUniqueInput {
        {% for field in model.fields -%}
            {% if field.isUnique -%}
                {{ field.name }}: {{ field.scalar }}
            {% endif -%}
        {% endfor %}
        {% if model.idFields | length -%}
            {{ model.idFields | join("_") }}: 
                {{ model.idFields | join(" ") | pascalCase }}FieldsInput!
        {% endif %}
    }

    input {{ model.name }}OrderByInput {
        {% for field in model.fields -%}
            {% if not field.relation -%}
                {{ field.name }}: OrderByArg
            {% else %}
                {{ field.name }}: {{ field.relation.type }}OrderByInput
            {% endif -%}
        {% endfor %}
    }

    {% if model.isEditable -%}
        input {{ model.name }}CreateInput {
            {% for field in model.fields -%}
                {% if field.isEditable and not field.relation -%}
                    {{ field.name }}: 
                        {{ field.scalar }}{% if field.isRequired -%}!{% endif %}
                {% elseif field.isEditable and field.relation -%}
                    {{ field.name }}: 
                        {{ field.relation.name }}CreateRelationInput{% if field.isRequired -%}!{% endif %}
                {% endif -%}
            {% endfor %}
        }

        input {{ model.name }}CreateManyInput {
            {% for field in model.fields -%}
                {% if field.isEditable and not field.relation -%}
                    {{ field.name }}: 
                        {{ field.scalar }}{% if field.isRequired -%}!{% endif %}
                {% endif -%}
            {% endfor %}
        }

        input {{ model.name }}UpdateInput {
            {% for field in model.fields -%}
                {% if field.isEditable and not field.relation -%}
                    {{ field.name }}: {{ field.scalar }}
                {% elseif field.isEditable and field.relation -%}
                    {{ field.name }}: {{ field.relation.name }}UpdateRelationsInput
                {% endif -%}
            {% endfor %}
        }

        {% if model.operationFields  | length -%}
        input {{ model.name }}OperationInput {
            {% for field in model.operationFields -%}
                {{ field.name }}: {{ field.scalar }}Operation
            {% endfor %}
        }
        {% endif -%}

        input {{ model.name }}UpdateUniqueInput {
            data: {{ model.name }}UpdateInput!
            where: {{ model.name }}WhereUniqueInput!
        }

        input {{ model.name }}UpdateManyInput {
            where: {{ model.name }}WhereInput!
            data: {{ model.name }}UpdateInput!
        }

        input {{ model.name }}UpsertInput {
            create: {{ model.name }}CreateInput!
            update: {{ model.name }}UpdateInput!
        }

        input {{ model.name }}UpsertUniqueInput {
            where: {{ model.name }}WhereUniqueInput!
            create: {{ model.name }}CreateInput!
            update: {{ model.name }}UpdateInput!
        }

        input {{ model.name }}ConnectOrCreateInput {
            where: {{ model.name }}WhereUniqueInput!
            create: {{ model.name }}CreateInput!
        }
    {% endif %}

    input {{ model.name }}DeleteUniqueInput {
        where: {{ model.name }}WhereUniqueInput!
    }

    input {{ model.name }}DeleteManyInput {
        where: {{ model.name }}WhereInput!
    }

    {% for field in model.fields -%}
        {% if field.relation -%}
            input {{ field.relation.name }}CreateRelationInput {
                {% if field.relation.kind === "one" -%}
                create: {{ field.relation.type }}CreateInput
                connect: {{ field.relation.type }}WhereUniqueInput
                connectOrCreate: {{ field.relation.type }}ConnectOrCreateInput
                {% else  -%}
                create: [{{ field.relation.type }}CreateInput]
                connect: [{{ field.relation.type }}WhereUniqueInput]
                connectOrCreate: [{{ field.relation.type }}ConnectOrCreateInput]
                {% endif -%}
            }

            input {{ field.relation.name }}UpdateRelationsInput {
                {% if field.relation.kind === "one" -%}
                connect: {{ field.relation.type }}WhereUniqueInput
                create: {{ field.relation.type }}CreateInput
                connectOrCreate: {{ field.relation.type }}ConnectOrCreateInput
                update: {{ field.relation.type }}UpdateInput
                upsert: {{ field.relation.type }}UpsertInput
                delete: Boolean
                disconnect: Boolean
                {% else  -%}
                connect: [{{ field.relation.type }}WhereUniqueInput]
                create: [{{ field.relation.type }}CreateInput]
                connectOrCreate: [{{ field.relation.type }}ConnectOrCreateInput]
                update: [{{ field.relation.type }}UpdateUniqueInput]
                upsert: [{{ field.relation.type }}UpsertUniqueInput]
                delete: [{{ field.relation.type }}DeleteUniqueInput]
                disconnect: [{{ field.relation.type }}WhereUniqueInput]
                set: [{{ field.relation.type }}WhereUniqueInput]
                updateMany: [{{ field.relation.type }}UpdateManyInput]
                deleteMany: [{{ field.relation.type }}DeleteManyInput]
                {% endif -%}
            }
        {% endif -%}
    {% endfor %}
{% endfor %}

input IntOperation {
    set: Int
    increment: Int
    decrement: Int
    multiply: Int
    divide: Int
}

input FloatOperation {
    set: Float
    increment: Float
    decrement: Float
    multiply: Float
    divide: Float
}

input AWSDateTimeFilter {
    equals: AWSDateTime
    gt: AWSDateTime
    gte: AWSDateTime
    in: [AWSDateTime!]
    lt: AWSDateTime
    lte: AWSDateTime
    not: AWSDateTimeFilter
    notIn: [AWSDateTime!]
}

input FloatFilter {
    equals: Float
    gt: Float
    gte: Float
    in: [Float!]
    lt: Float
    lte: Float
    not: FloatFilter
    notIn: [Float!]
}

input IntFilter {
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: IntFilter
    notIn: [Int!]
}

input AWSJSONFilter {
    contains: String
    endsWith: String
    equals: AWSJSON
    in: [AWSJSON!]
    not: AWSJSONFilter
    notIn: [AWSJSON!]
    startsWith: String
}

input AWSEmailFilter {
    contains: String
    endsWith: String
    equals: AWSEmail
    in: [AWSEmail!]
    not: AWSEmailFilter
    notIn: [AWSEmail!]
    startsWith: String
}

input AWSURLFilter {
    contains: String
    endsWith: String
    equals: AWSURL
    in: [AWSURL!]
    not: AWSURLFilter
    notIn: [AWSURL!]
    startsWith: String
}

input StringFilter {
    contains: String
    endsWith: String
    equals: String
    in: [String!]
    not: StringFilter
    notIn: [String!]
    startsWith: String
    mode: String
}

input BooleanFilter {
    equals: Boolean
    not: BooleanFilter
}

type Mutation {
    {% for model in models %}
        {% if model.isEditable -%}
        """
        Create a new single {{ model.name }} record.
        """
        create{{ model.name }}(
            data: {{ model.name }}CreateInput!
        ): {{ model.name }} {{ model.directives.create | safe }}
        """
        Create multiple new {{ model.name }} records.
        """
        createMany{{ model.pluralizedName }}(
            data: [{{ model.name }}CreateManyInput!],
            skipDuplicates: Boolean
        ): BatchPayload {{ model.directives.createMany | safe }}
        """
        Update an existing single {{ model.name }} record.
        """
        update{{ model.name }}(
            where: {{ model.name }}WhereUniqueInput!,
            {% if model.operationFields  | length -%}
            data: {{ model.name }}UpdateInput,
            operation: {{ model.name }}OperationInput,
            {% else %}
            data: {{ model.name }}UpdateInput,
            {% endif %}
        ): {{ model.name }} {{ model.directives.update | safe }}
        """
        Update multiple existing {{ model.name }} records.
        """
        updateMany{{ model.pluralizedName }}(
            where: {{ model.name }}WhereInput!,
            {% if model.operationFields  | length -%}
            data: {{ model.name }}UpdateInput,
            operation: {{ model.name }}OperationInput,
            {% else %}
            data: {{ model.name }}UpdateInput,
            {% endif %}
        ): BatchPayload {{ model.directives.updateMany | safe }}
        """
        Update an existing or create a new single {{ model.name }} record.
        """
        upsert{{ model.name }}(
            data: {{ model.name }}UpdateInput!,
            where: {{ model.name }}WhereUniqueInput!
        ): {{ model.name }} {{ model.directives.upsert | safe }}
        {% endif -%}
        """
        Delete a single {{ model.name }} record.
        """
        delete{{ model.name }}(
            where: {{ model.name }}WhereUniqueInput!
        ): {{ model.name }} {{ model.directives.delete | safe }}
        """
        Delete multiple {{ model.name }} records.
        """
        deleteMany{{ model.pluralizedName }}(
            where: {{ model.name }}WhereInput!
        ): BatchPayload {{ model.directives.deleteMany | safe }}
    {% endfor %}
}

type Query {
    {% for model in models %}
        """
        Find a single {{ model.name }} record by unique identifier.
        """
        get{{ model.name }}(
            where: {{ model.name }}WhereUniqueInput!
        ): {{ model.name }} {{ model.directives.get | safe }}
        """
        Find many {{ model.name }} records (optional query filters).
        """
        list{{ model.pluralizedName }}(
            where: {{ model.name }}WhereInput,
            orderBy: [{{ model.name }}OrderByInput],
            skip: Int,
            take: Int
        ): [{{ model.name }}] {{ model.directives.list | safe }}
        """
        Count all {{ model.name }} records (optional query filters).
        """
        count{{ model.pluralizedName }}(
            where: {{ model.name }}WhereInput,
            orderBy: [{{ model.name }}OrderByInput],
            skip: Int,
            take: Int
        ): Int {{ model.directives.count | safe }}
    {% endfor %}
}

type Subscription {
    {% for model in models %}
        {% if model.isEditable -%}
        """
        Triggered from `create{{ model.name }}` mutation (excl. `createMany{{ model.pluralizedName }}` and `upsert{{ model.name }}`).
        """
        onCreated{{ model.name }}(
            {% if model.idFields | length -%}
                {{ model.idFields | join("_") }}: 
                    {{ model.idFields | join(" ") | pascalCase }}FieldsInput!
            {% endif %}
            {% for field in model.subscriptionFields -%}
                {{ field.name }}: {{ field.scalar }}
            {% endfor %}
        ): {{ model.name }}
            @aws_subscribe(mutations: ["create{{ model.name }}"]) {{ model.directives.subscription | safe }}
        """
        Triggered from `update{{ model.name }}` mutation (excl. `updateMany{{ model.pluralizedName }}` and `upsert{{ model.name }}`).
        """
        onUpdated{{ model.name }}(
            {% if model.idFields | length -%}
                {{ model.idFields | join("_") }}: 
                    {{ model.idFields | join(" ") | pascalCase }}FieldsInput!
            {% endif %}
            {% for field in model.subscriptionFields -%}
                {{ field.name }}: {{ field.scalar }}
            {% endfor %}
        ): {{ model.name }}
            @aws_subscribe(mutations: ["update{{ model.name }}"]) {{ model.directives.subscription | safe }}
        """
        Triggered from `upsert{{ model.name }}` mutation.
        """
        onUpserted{{ model.name }}(
            {% if model.idFields | length -%}
                {{ model.idFields | join("_") }}: 
                    {{ model.idFields | join(" ") | pascalCase }}FieldsInput!
            {% endif %}
            {% for field in model.subscriptionFields -%}
                {{ field.name }}: {{ field.scalar }}
            {% endfor %}
        ): {{ model.name }}
            @aws_subscribe(mutations: ["upsert{{ model.name }}"]) {{ model.directives.subscription | safe }}
        {% endif -%}
        """
        Triggered from `delete{{ model.name }}` mutation (excl. `deleteMany{{ model.pluralizedName }}`).
        """
        onDeleted{{ model.name }}(
            {% if model.idFields | length -%}
                {{ model.idFields | join("_") }}:
                    {{ model.idFields | join(" ") | pascalCase }}FieldsInput!
            {% endif %}
            {% for field in model.subscriptionFields -%}
                {{ field.name }}: {{ field.scalar }}
            {% endfor %}
        ): {{ model.name }}
            @aws_subscribe(mutations: ["delete{{ model.name }}"]) {{ model.directives.subscription | safe }}
        {% if model.isEditable -%}
        """
        Triggered from ANY SINGLE record mutation (excl. `on*Many{{ model.pluralizedName }}`).
        """
        onMutated{{ model.name }}(
            {% if model.idFields | length -%}
                {{ model.idFields | join("_") }}:
                    {{ model.idFields | join(" ") | pascalCase }}FieldsInput!
            {% endif %}
            {% for field in model.subscriptionFields -%}
                {{ field.name }}: {{ field.scalar }}
            {% endfor %}
        ): {{ model.name }}
            @aws_subscribe(mutations: ["create{{ model.name }}", "update{{ model.name }}", "upsert{{ model.name }}", "delete{{ model.name }}"]) {{ model.directives.subscription | safe }}
        """
        Triggered from `createMany{{ model.pluralizedName }}` mutation.
        """
        onCreatedMany{{ model.pluralizedName }}: BatchPayload
            @aws_subscribe(mutations: ["createMany{{ model.pluralizedName }}"]) {{ model.directives.subscription | safe }}
        """
        Triggered from `updateMany{{ model.pluralizedName }}` mutation.
        """
        onUpdatedMany{{ model.pluralizedName }}: BatchPayload
            @aws_subscribe(mutations: ["updateMany{{ model.pluralizedName }}"]) {{ model.directives.subscription | safe }}
        """
        Triggered from ANY MULTIPLE records mutation (excl. single record mutations).
        """
        onMutatedMany{{ model.pluralizedName }}: BatchPayload
            @aws_subscribe(mutations: ["createMany{{ model.pluralizedName }}", "updateMany{{ model.pluralizedName }}", "deleteMany{{ model.pluralizedName }}"]) {{ model.directives.subscription | safe }}
        {% endif -%}
        """
        Triggered from `deleteMany{{ model.pluralizedName }}` mutation.
        """
        onDeletedMany{{ model.pluralizedName }}: BatchPayload
            @aws_subscribe(mutations: ["deleteMany{{ model.pluralizedName }}"]) {{ model.directives.subscription | safe }}
    {% endfor %}
}