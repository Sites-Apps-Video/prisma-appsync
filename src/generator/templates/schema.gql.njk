enum OrderByArg {
    ASC
    DESC
}

type BatchPayload {{ directiveAliases.default | safe }} {
    count: Int
}

input AWSDateTimeFilter {
    equals: AWSDateTime
    gt: AWSDateTime
    gte: AWSDateTime
    in: [AWSDateTime!]
    lt: AWSDateTime
    lte: AWSDateTime
    not: AWSDateTimeFilter
    notIn: [AWSDateTime!]
}

input IntFilter {
    contains: Int
    endsWith: Int
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: IntFilter
    notIn: [Int!]
    startsWith: Int
}

input StringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: StringFilter
    notIn: [String!]
    startsWith: String
}

{% for enum in enums %}
    enum {{ enum.name }} {
        {% for value in enum.values -%}
            {{ value }}
        {% endfor %}
    }
{% endfor %}

{% for model in models %}
    type {{ model.name }} {{ model.directives.type | safe }} {
        {% for field in model.fields -%}
            {{ field.name }}: {{ field.scalar }}{% if field.isRequired -%}!{% endif %} {{ field.directives.field | safe }}
        {% endfor %}
    }
{% endfor %}

{% for model in models %}
    {% if model.idFields | length -%}
        input {{ model.idFields | join(" ") | pascalCase }}FieldsInput {
            {% for field in model.fields -%}
                {% if field.name in model.idFields -%}
                    {{ field.name }}: {{ field.scalar }}
                {% endif -%}
            {% endfor %}
        }
    {% endif %}

    input {{ model.name }}CreateInput {
        {% for field in model.fields -%}
            {% if field.isEditable and not field.relation -%}
                {{ field.name }}: 
                    {{ field.scalar }}{% if field.isRequired -%}!{% endif %} {{ field.directives.create | safe }}
            {% elseif field.isEditable and field.relation -%}
                {{ field.name }}: 
                    {{ field.relation.name }}CreateRelations{% if field.isRequired -%}!{% endif %} {{ field.directives.create | safe }}
            {% endif -%}
        {% endfor %}
    }

    input {{ model.name }}UpdateInput {
        {% for field in model.fields -%}
            {% if field.isEditable and not field.relation -%}
                {{ field.name }}: {{ field.scalar }} {{ field.directives.update | safe }}
            {% elseif field.isEditable and field.relation -%}
                {{ field.name }}: {{ field.relation.name }}UpdateRelations {{ field.directives.update | safe }}
            {% endif -%}
        {% endfor %}
    }

    input {{ model.name }}ListRelationFilter {
        every: {{ model.name }}WhereInput
        none: {{ model.name }}WhereInput
        some: {{ model.name }}WhereInput
    }

    {% for field in model.fields -%}
        {% if field.scalar in ["String", "Int", "AWSDateTime"] -%}
            union {{ model.name }}{{ field.name | pascalCase }}Filter = {{ field.scalar }} | {{ field.scalar }}Filter
        {% endif -%}
    {% endfor %}
    
    input {{ model.name }}WhereInput {
        OR: [{{ model.name }}WhereInput]
        NOT: [{{ model.name }}WhereInput]
        AND: [{{ model.name }}WhereInput]
        {% for field in model.fields -%}
            {% if not field.relation -%}
                {% if field.scalar in ["String", "Int", "AWSDateTime"] -%}
                    {{ field.name }}: {{ model.name }}{{ field.name | pascalCase }}Filter
                {% else -%}
                    {{ field.name }}: {{ field.scalar }}
                {% endif -%}
            {% else -%}
                {{ field.name }}: {{ field.relation.type }}ListRelationFilter
            {% endif -%}
        {% endfor %}
    }

    input {{ model.name }}WhereUniqueInput {
        {% for field in model.fields -%}
            {% if field.isUnique -%}
                {{ field.name }}: {{ field.scalar }}
            {% endif -%}
        {% endfor %}
        {% if model.idFields | length -%}
            {{ model.idFields | join("_") }}: 
                {{ model.idFields | join(" ") | pascalCase }}FieldsInput!
        {% endif %}
    }

    input {{ model.name }}OrderByInput {
        {% for field in model.fields -%}
            {% if not field.relation -%}
                {{ field.name }}: OrderByArg
            {% endif -%}
        {% endfor %}
    }

    input {{ model.name }}UpdateUniqueInput {
        data: {{ model.name }}UpdateInput!
        where: {{ model.name }}WhereUniqueInput!
    }

    input {{ model.name }}UpdateManyInput {
        data: {{ model.name }}UpdateInput!
        where: {{ model.name }}WhereInput!
    }

    input {{ model.name }}UpsertInput {
        create: {{ model.name }}CreateInput!
        update: {{ model.name }}UpdateInput!
    }

    input {{ model.name }}UpsertUniqueInput {
        where: {{ model.name }}WhereUniqueInput!
        create: {{ model.name }}CreateInput!
        update: {{ model.name }}UpdateInput!
    }

    input {{ model.name }}DeleteUniqueInput {
        where: {{ model.name }}WhereUniqueInput!
    }

    input {{ model.name }}DeleteManyInput {
        where: {{ model.name }}WhereInput!
    }

    input {{ model.name }}ConnectOrCreateInput {
        where: {{ model.name }}WhereUniqueInput!
        create: {{ model.name }}CreateInput!
    }

    {% for field in model.fields -%}
        {% if field.relation -%}
            input {{ field.relation.name }}CreateRelations {
                {% if field.relation.kind === "one" -%}
                create: {{ field.relation.type }}CreateInput
                connect: {{ field.relation.type }}WhereUniqueInput
                connectOrCreate: {{ field.relation.type }}ConnectOrCreateInput
                {% else  -%}
                create: [{{ field.relation.type }}CreateInput]
                connect: [{{ field.relation.type }}WhereUniqueInput]
                connectOrCreate: [{{ field.relation.type }}ConnectOrCreateInput]
                {% endif -%}
            }

            input {{ field.relation.name }}UpdateRelations {
                {% if field.relation.kind === "one" -%}
                create: {{ field.relation.type }}CreateInput
                connect: {{ field.relation.type }}WhereUniqueInput
                connectOrCreate: {{ field.relation.type }}ConnectOrCreateInput
                update: {{ field.relation.type }}UpdateInput
                upsert: {{ field.relation.type }}UpsertInput
                delete: Boolean
                disconnect: Boolean
                {% else  -%}
                create: [{{ field.relation.type }}CreateInput]
                connect: [{{ field.relation.type }}WhereUniqueInput]
                connectOrCreate: [{{ field.relation.type }}ConnectOrCreateInput]
                update: [{{ field.relation.type }}UpdateUniqueInput]
                upsert: [{{ field.relation.type }}UpsertUniqueInput]
                delete: [{{ field.relation.type }}DeleteUniqueInput]
                disconnect: [{{ field.relation.type }}WhereUniqueInput]
                set: [{{ field.relation.type }}WhereUniqueInput]
                updateMany: [{{ field.relation.type }}UpdateManyInput]
                deleteMany: [{{ field.relation.type }}DeleteManyInput]
                {% endif -%}
            }
        {% endif -%}
    {% endfor %}
{% endfor %}

type Mutation {
    {% for model in models %}
        create{{ model.name }}(
            data: {{ model.name }}CreateInput!
        ): {{ model.name }} {{ model.directives.create | safe }}
        update{{ model.name }}(
            data: {{ model.name }}UpdateInput!,
            where: {{ model.name }}WhereUniqueInput!
        ): {{ model.name }} {{ model.directives.update | safe }}
        upsert{{ model.name }}(
            data: {{ model.name }}UpdateInput!,
            where: {{ model.name }}WhereUniqueInput!
        ): {{ model.name }} {{ model.directives.upsert | safe }}
        delete{{ model.name }}(
            where: {{ model.name }}WhereUniqueInput!
        ): {{ model.name }} {{ model.directives.delete | safe }}
        deleteMany{{ model.pluralizedName }}(
            where: {{ model.name }}WhereInput!
        ): BatchPayload {{ model.directives.deleteMany | safe }}
    {% endfor %}
}

type Query {
    {% for model in models %}
        get{{ model.name }}(
            where: {{ model.name }}WhereUniqueInput!
        ): {{ model.name }} {{ model.directives.get | safe }}
        list{{ model.pluralizedName }}(
            where: {{ model.name }}WhereInput,
            orderBy: {{ model.name }}OrderByInput,
            skip: Int,
            take: Int
        ): [{{ model.name }}] {{ model.directives.list | safe }}
    {% endfor %}
}

type Subscription {
    {% for model in models %}
        onCreated{{ model.name }}(
            {% if model.idFields | length -%}
                {{ model.idFields | join("_") }}: 
                    {{ model.idFields | join(" ") | pascalCase }}FieldsInput!
            {% endif %}
            {% for field in model.subscriptionFields -%}
                {{ field.name }}: {{ field.scalar }}
            {% endfor %}
        ): {{ model.name }}
            @aws_subscribe(mutations: ["create{{ model.name }}"]) {{ model.directives.subscription | safe }}
        onUpdated{{ model.name }}(
            {% if model.idFields | length -%}
                {{ model.idFields | join("_") }}: 
                    {{ model.idFields | join(" ") | pascalCase }}FieldsInput!
            {% endif %}
            {% for field in model.subscriptionFields -%}
                {{ field.name }}: {{ field.scalar }}
            {% endfor %}
        ): {{ model.name }}
            @aws_subscribe(mutations: ["update{{ model.name }}"]) {{ model.directives.subscription | safe }}
        onDeleted{{ model.name }}(
            {% if model.idFields | length -%}
                {{ model.idFields | join("_") }}:
                    {{ model.idFields | join(" ") | pascalCase }}FieldsInput!
            {% endif %}
            {% for field in model.subscriptionFields -%}
                {{ field.name }}: {{ field.scalar }}
            {% endfor %}
        ): {{ model.name }}
            @aws_subscribe(mutations: ["delete{{ model.name }}"]) {{ model.directives.subscription | safe }}
    {% endfor %}
}